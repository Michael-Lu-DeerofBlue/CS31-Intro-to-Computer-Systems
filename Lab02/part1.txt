Swarthmore College, CS 31
Copyright (c) 2022 Swarthmore College Computer Science Department,
Swarthmore PA, Kevin Webb
==========================================================================

Your Name: Michael Lu
Your email: ylu4@swarthmore.edu

==========================================================================
Directions: Using an editor, add your answers to the "Part 1" questions
to this file.  Follow the delimiting style shown for the first two
questions so that we can easily find your answers to each question.

* For exponents use the `^` char
  (ex. 2^10  is 2 raised to the tenth power).
* For subscripts just list the subscript next to the variable
  (ex. X0 and X3, ... for X sub 0 and X sub 3)
* For different representations use the following prefixes:
  0b for binary numbers
  0x for hexadecimal numbers
  no prefix for decimal numbers
  (ex. 0b101010 is binary value 101010; 0x123a is hexadecimal value 123a)

Do not write lines longer than 80 characters (use the "Enter" key to add
line breaks as you type and work in a window that is exactly 80 characters
wide so you can see when you need to add these in as you type).

==========================================================================

-----------
Question 1
-----------
255. Because there are 2^8 = 256 unique sequences in a byte, and 0 has
taken one spot in the sequences. Thus, the largest positive number is 
255.

----------
Question 2
----------
127. Because in a 8-bit number of 2's complement, the circular layout is
divided in half. From 0b00000000 to 0b01111111 represents 0 to 127, and
from 0b10000000 to 0b11111111 represents -128 to -1. Also because 0 is
counted, the largest positive value is 127.

----------
Question 3
----------
0b10100110 = 2^7 + 2^5 + 2^2 + 2^1 = 128 + 32 + 4 + 2 = 166

----------
Question 4
----------
0b10100110 = -2^7 + 2^5 + 2^2 + 2^1 = -128 + 32 + 4 + 2 = -90 

----------
Question 5
----------
a. 0b11000010. Both operants are read as 93 and 101 whether they are 
signed or not. The operatation doesn't results in overflow if the two 
operands are unsigned, because when they are unsigned, the binary 
result has range 0-255. Unsigned 0b11000010 is 194. There is no 
overflow. But there is overflow if the two operands are signed. The 
signed 0b11000010 is -62. Which is not what 93 + 101 should be.
b. -62
c. 194
d. 0b11111000. This doesn't results in overflow if the two operands are 
signed, because 0b11111000 is -8, and it's correct. But there is 
overflow if the two operands are unsigned, because 0b11111000 is 248.

---------
Question 6
----------
a. 0x061f: 0000 = 0; 0110 = 6; 0001 = 1; 1111 = f (By the The Correspondence
Between All Four-Bit Sequences and One-Digit Hexadecimal Numbers)
b. 0xc5e5: 1100 = c; 0101 = 5; 1110 = e; 0101 = 5
c. 0xa7d6: 1010 = a; 0111 = 7; 1101 = d; 0110 = 6

---------
Question 7
----------
a. 0b00100011: 2 = 0010; 3 = 0011
b. 0b100001010010; 8 = 1000; 5 = 0101; 2 = 0010
c. 0b1100000110100110; c = 1100; 1 = 0001; a = 1010; 6 = 0110
d. 0b1110111110101011; e = 1110; f = 1111; a = 1010; b = 1011

---------
Question 8
----------
a. 0b1100; 0xb. Because 0+0+4+8=12, 12 = 0b1100. Because it is 0123456789abcdef
for hexadecimal, 12 = 0xb.
b. 0b11011100; 0xdc. Because 32+0+0+4+0+0=36, 36=0b00100100. Thus, -36 is 
flipped 0b00100100 plus one, that is 0b11011100. Using the form that converge
All Four-Bit Sequences and One-Digit Hexadecimal Numbers, it is 0xdc in 
hexadecimal.
c. 0b01111011; 0x7b. Because 64+32+16+8+0+2+1=123. Thus, 123=0b01111011. Using
the four-bit converge form, it is 0x7b in hexadecimal.
d. 0b10000101; 0b85. Flipping 0b01111011 and adding 1 results in 0b10000101. 
Using the four-bit converge form, it is 0x85 in hexadecimal.

---------
Question 9
----------
a. 0b0111; 7
b. 0b0001; 1
c. 0b0110; 6
d. 0b1010; 10
e. 0b1101; 13
f. 0b1100; 12
g. 0b0001; 1